#!/bin/bash
export provider_name="AZURE"
export region="EUROPE_WEST"

###############################################
# Check for the standard error in the json response
# usage:
#      output=$(curl -s ...)
#      check_for_response_error "${output}"
###############################################
function check_for_response_error () {
	result=$1

	if [ -z "${result}" ];
	then
		return 0
	fi
	error=$(echo $result|jq -r '.error')
	if [ "${error}" != "null" ];
	then
		echo "Error: $(echo $result|jq -r '.detail')" && exit 1
	fi
}

###############################################
# Checks if a required argument is used and also checks for the allowed options,
# it will stop execution if fails
#
# usage:
#     test_arg_required_and_options "param" "message" "option1,option2,option3"
###############################################
function test_arg_required_and_options () {
	param=$1
	message=$2
	options=$3

	if [ -z "${param}" ];
	then
		usage "${message}" && exit 1
	fi

	if [ ! -z "${options}" ];
	then
		option_valid=0
		IFS=',' read -ra OPTS <<< "$options"
		for o in "${OPTS[@]}"; do
			if [ "$o" == "$param" ];
			then
				option_valid=1
			fi
		done

		if [ $option_valid == 0 ];
		then
			usage "${message}" && exit 1
		fi
	fi

}

###############################################
# creates a project by name in Atlas
#
# return: it will set the project_id
#
# usage:
#     create_project "MyTestProject"
###############################################
function create_project () {
	projectName=$1
	echo "Creating $projectName"

	project_result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json" -X POST "${base_url}/groups" --data "{ \"name\" : \"${projectName}\", \"orgId\" : \"${organizationId}\" }")

	check_for_response_error "${project_result}" 

	if [ "$DEBUG" == "1" ];
	then
		echo "Result: ${project_result}"
	fi

	export project_id=$(echo $project_result|jq -r '.id')

	return 0
}

###############################################
# creates a cluster
#
# return: it will set the cluster_id
#
# usage:
#     create_project "MyTestProject"
###############################################
function create_cluster () {
	template=$1
	disk_size=$2

	echo "Creating cluster"

	if [ -z "${disk}" ];
	then
		case "${template}" in
			small ) 
				export disk_size=100
				;;
			medium ) 
				export disk_size=300
				echo "medium"
				;;
			large )
				export disk_size=500
				echo "large"
				;;
		esac
	fi
	data=$(envsubst < templates/azure/${template}.json)
	
	if [ "$DEBUG" == "1" ];
	then
		echo $data
	fi

	cluster_result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		-X POST "${base_url}/groups/${project_id}/clusters" --data "${data}")

	check_for_response_error "${cluster_result}" 

	if [ "$DEBUG" == "1" ];
	then
		echo "result: $cluster_result"
	fi

	export cluster_id=$(echo $cluster_result|jq -r '.id')

	return 0
}

###############################################
# creates a user in the environment
#
# returns: If the auth type is scram then it will show in the output the generated password, if it's x509 then it will output pem to a folder named "output"
#
# usage:
#     create_user "<project_id>" "<username>" "<authtype: x509,scram>"
###############################################
function create_user () {
	project_id=$1
	username=$2
	authtype=$3

	case "${authtype}" in
		x509 )
			export auth_database="\$external"
			data=$(envsubst < templates/create_user_x509.json)
			;;
		scram )
			export auth_database="admin"
			export password="1234"
			data=$(envsubst < templates/create_user_scram.json)
			;;
	esac

	echo "Creating user"

	if [ "$DEBUG" == "1" ];
	then
		echo "Command data: ${data}"
	fi

	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		-X POST "${base_url}/groups/${project_id}/databaseUsers" --data "${data}")

	if [ "$DEBUG" == "1" ];
	then
		echo "Result from create user: ${result}"
	fi

	check_for_response_error "${result}"

	case "${authtype}" in
		x509 )
			echo "Getting the x509 certificate"
			data_cert="{ \"monthsUntilExpiration\": 12 }"
			result_cert=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
				-X POST "${base_url}/groups/${project_id}/databaseUsers/${username}/certs" --data "${data_cert}")

			if [ "$DEBUG" == "1" ];
			then
				echo "result from get certificate ${result_cert}"
			fi

			mkdir -p output

			result_cert=$(echo ${result_cert}|sed -e "s/-----\([A-Z]*\) \([A-Z]*\)-----/-----\1_\2-----/g" -e "s/-----\([A-Z]*\) \([A-Z]*\) \([A-Z]*\)-----/-----\1_\2_\3-----/g")
			echo -n $result_cert | tr ' ' '\n'  > output/${username}.pem

			sed -e "s/-----\([A-Z]*\)_\([A-Z]*\)-----/-----\1 \2-----/g" -e "s/-----\([A-Z]*\)_\([A-Z]*\)_\([A-Z]*\)-----/-----\1 \2 \3-----/g" -i '' output/${username}.pem

			echo "Certificate generated in output/${username}.pem"
			;;
		scram )
			echo "User created username: ${username}, password: ${password}"
			;;

	esac
	return 0
}

function get_peering_only_mode () {
	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request GET "${base_url}/groups/${project_id}/privateIpMode")

	if [ "$DEBUG" == "1" ];
	then
		echo "Result Enabling Peering: ${result}"
	fi

	check_for_response_error "${result}"

	export peering_only_mode_enabled=$(echo ${result} |jq .enabled)

	echo "Peering only mode current status: ${peering_only_mode_enabled}"
}

###############################################
# Sets the flag as "Connect via Peering Only (GCP and Azure)" mandatory for Azure 
# It will use the ${project_id}
#
# usage:
#     enable_peering_only_mode
###############################################
function enable_peering_only_mode () {

	get_peering_only_mode

	if [ "${peering_only_mode_enabled}" == "true" ];
	then
		echo "Peering only mode is already enabled"
		return 0
	fi

	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request PATCH "${base_url}/groups/${project_id}/privateIpMode" --data '{ "enabled": true }')

	if [ "$DEBUG" == "1" ];
	then
		echo "Result Enabling Peering: ${result}"
	fi

	check_for_response_error "${result}"

	echo "Peering only mode enabled"

	return 0
}

###############################################
# Clears all the previous alerts in the current project ${project_id}
#
# usage:
#     delete_all_alerts
###############################################
function delete_all_alerts () {
	current_config=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request GET "${base_url}/groups/${project_id}/alertConfigs")

	if [ "$DEBUG" == "1" ];
	then
		echo "${current_config}" | jq .
	fi

	for alert in $(echo ${current_config}| jq -c .results[]); do
		alertId=$(echo ${alert} | jq .id | sed -e "s/\"//g")

		#		if [ "$DEBUG" == "1" ];
		#		then
		#			echo "${alert}" | jq .
		#		fi

		delete_alert "${alertId}"
	done
}

###############################################
# deletes one alert from the current project ${project_id}
#
# usage:
#     delete_all_alert "<alert_id>"
###############################################
function delete_alert () {
	alertId=$1
	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request DELETE "${base_url}/groups/${project_id}/alertConfigs/${alertId}")

	if [ "$DEBUG" == "1" ];
	then
		echo "deleted alert ${alertId}"
	fi
	check_for_response_error "${result}"
}

###############################################
# Creates all the alerts using the templates from the folder templates/alerts/<environment>/
# Warning: it will delete all the previous alerts
#
# usage:
#     create_alerts
###############################################
function create_alerts () {
	echo "Warning all the previous alerts will be deleted"

	delete_all_alerts

	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request GET "${base_url}/groups/${project_id}/alertConfigs")
	#echo ${result}| jq .

	if [ -d "templates/alerts/${env_type}" ];
	then
		for f in templates/alerts/${env_type}/*.json; 
		do
			data=$(envsubst < $f)

			result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
				--request POST "${base_url}/groups/${project_id}/alertConfigs" --data "${data}")
			if [ "$DEBUG" == "1" ];
			then
				echo "create alert: ${result}"
			fi
			check_for_response_error "${result}"
		done
	fi

	return 0
}

###############################################
# checks for the deployment status, it will wait until the cluster is in IDLE state
# it will wait for 10000 seconds (16 mins)
#
# usage:
#     wait_for_idle_status
###############################################
function wait_for_idle_status () {
	counter=1
	continue_cond=1
	MAX_RETRIES=100
	while [ $continue_cond == 1 ];
	do
		get_cluster
#		if [ "$DEBUG" == "1" ];
#		then
#			echo "${cluster_info}" | jq .
#		fi
		deployment_status=$(echo "${cluster_info}" | jq -r ".stateName")
		counter=$[$counter+1]
		if [ $counter -gt $MAX_RETRIES ];
		then
			continue_cond=0
		else
			case ${deployment_status} in
				IDLE )
					echo "New Status: ${deployment_status}"
					continue_cond=0
					;;
				* )
					echo "Waiting Current Status: ${deployment_status}"
					sleep 10
					;;
			esac
		fi
	done
}

###############################################
# sets the backup policies (retentions, etc), it uses the backup config file for the parameters
# server needs to be in IDLE status, check wait_for_idle_status
#
# Config file example (it must be a bash script):
# backup.conf
#
# intervalhours=8
# retentiondays=3
# dailySnapshotRetentionDays=3
# weeklySnapshotRetentionWeeks=0
# monthlySnapshotRetentionMonths=0
#
# usage:
#     set_backup_policies
###############################################
function set_backup_policies () {
	. ${backup_conf}
	export intervalhours="${intervalhours}" # 6, 8, 12, 24
	export retentiondays="${retentiondays}"
	export dailySnapshotRetentionDays=${dailySnapshotRetentionDays}
	export weeklySnapshotRetentionWeeks=${weeklySnapshotRetentionWeeks}
	export monthlySnapshotRetentionMonths=${monthlySnapshotRetentionMonths}

	data=$(envsubst < templates/backups/configuration.json)

	if [ "$DEBUG" == "1" ];
	then
		echo "${data}"
		echo "${cluster_name}"
	fi

	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request PATCH "${base_url}/groups/${project_id}/clusters/${cluster_name}/snapshotSchedule" --data "${data}")
	if [ "$DEBUG" == "1" ];
	then
		echo "point in time backups: ${result}"
	fi
	check_for_response_error "${result}"
}

###############################################
# Retrieves the current clusters in the active project ${project_id}
# 
# return:  the variable clusters_info is set with the result
#
# usage:
#     set_backup_policies
###############################################
function get_clusters () {
	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request GET "${base_url}/groups/${project_id}/clusters")
	
	check_for_response_error "${result}"

	export clusters_info=${result}
}

###############################################
# Retrieves the current cluster information using ${project_id} and ${cluster_name}
# 
# return:  the variable cluster_info is set with the result
#
# usage:
#     get_cluster
###############################################
function get_cluster () {
	result=$(curl -s -u "${public_key}:${private_key}" --digest -H "Content-Type: application/json"  \
		--request GET "${base_url}/groups/${project_id}/clusters/${cluster_name}")
	
	check_for_response_error "${result}"

	export cluster_info=${result}
}
